- During development, socket.io serves the client automatically for us
The main idea behind Socket.IO is that you can send and receive any events you want, with any data you want. Any objects that can be encoded as JSON will do, and binary data is supported too.

// Broadcasting //
Emiting event from the server to the rest of the user

// this will emit the event to all connected sockets
io.emit('hello', 'world');

If you want to send a message to everyone except for a certain emitting socket, we have the broadcast flag for emitting from that socket:

io.on('connection', (socket) => {
  socket.broadcast.emit('hi');
});


// Acknowledgements //
Events are great, but in some cases you may want a more classic request-response API. In Socket.IO, this feature is named "acknowledgements".

comes with
1. callback fun
You can add a callback as the last argument of the emit(), and this callback will be called once the other side has acknowledged the event

// from client
socket.timeout(5000).emit('request', { foo: 'bar' }, 'baz', (err, response) => {
  if (err) {
    // the server did not acknowledge the event in the given delay
  } else {
    console.log(response.status); // 'ok'
  }
});


// server
io.on('connection', (socket) => {
  socket.on('request', (arg1, arg2, callback) => {
    console.log(arg1); // { foo: 'bar' }
    console.log(arg2); // 'baz'
    callback({
      status: 'ok'
    });
  });
});

2. Promise

// from client

try {
  const response = await socket.timeout(5000).emitWithAck('request', { foo: 'bar' }, 'baz');
  console.log(response.status); // 'ok'
} catch (e) {
  // the server did not acknowledge the event in the given delay
}

// server

io.on('connection', (socket) => {
  socket.on('request', (arg1, arg2, callback) => {
    console.log(arg1); // { foo: 'bar' }
    console.log(arg2); // 'baz'
    callback({
      status: 'ok'
    });
  });
});


// Catch all events
A catch-all listeners is a listener that will be called for any incoming event. This is useful for debugging your application:

// sender
socket.emit('hello', 1, '2', { 3: '4', 5: Uint8Array.from([6]) });

// receiver

socket.onAny((eventName, ...args) => {
  console.log(eventName); // 'hello'
  console.log(args); // [ 1, '2', { 3: '4', 5: ArrayBuffer (1) [ 6 ] } ]
});


Rooms
In Socket.IO jargon, a room is an arbitrary channel that sockets can join and leave. It can be used to broadcast events to a subset of connected clients:

io.on('connection', (socket) => {
  // join the room named 'some room'
  socket.join('some room');

  // broadcast to all connected clients in the room
  io.to('some room').emit('hello', 'world');

  // broadcast to all connected clients except those in the room
  io.except('some room').emit('hello', 'world');

  // leave the room
  socket.leave('some room');
});

// Handling disconnection //

1. Socket.io is not always connected
2. Socket.io does not store the event.


Which means that your application needs to be able to synchronize the local state of the client with the global state on the server after a temporary disconnection.

The Socket.IO client will automatically try to reconnect after a small delay. However, any missed event during the disconnection period will effectively be lost for this client.

Hence disconnected client might miss some changes

// Connection state recovery //

// ways synchronize the state of the client upon reconnection //

1. Either the server send the whole state
2. or the client keeps track of the last event it has processed and the server sends the missing pieces
